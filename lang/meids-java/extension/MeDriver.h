/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class de_meilhaus_medriver_MeDriver */

#ifndef _Included_de_meilhaus_medriver_MeDriver
#define _Included_de_meilhaus_medriver_MeDriver
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meOpen
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meOpen
  (JNIEnv *, jobject, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meClose
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meClose
  (JNIEnv *, jobject, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meLockDriver
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meLockDriver
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meLockDevice
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meLockDevice
  (JNIEnv *, jobject, jint, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meLockSubdevice
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meLockSubdevice
  (JNIEnv *, jobject, jint, jint, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOIrqStart
 * Signature: (IIIIIII)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOIrqStart
  (JNIEnv *, jobject, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOIrqStop
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOIrqStop
  (JNIEnv *, jobject, jint, jint, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOIrqWait
 * Signature: (IIILde/meilhaus/medriver/MeIrq;II)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOIrqWait
  (JNIEnv *, jobject, jint, jint, jint, jobject, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOResetDevice
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOResetDevice
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOResetSubdevice
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOResetSubdevice
  (JNIEnv *, jobject, jint, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOSingleConfig
 * Signature: (IIIIIIIII)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOSingleConfig
  (JNIEnv *, jobject, jint, jint, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOSingle
 * Signature: ([Lde/meilhaus/medriver/MeIOSingle;I)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOSingle
  (JNIEnv *, jobject, jobjectArray, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOStreamConfig
 * Signature: (II[Lde/meilhaus/medriver/MeIOStreamConfig;Lde/meilhaus/medriver/MeIOStreamTrigger;II)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOStreamConfig
  (JNIEnv *, jobject, jint, jint, jobjectArray, jobject, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOStreamRead
 * Signature: (IIIII)[I
 */
JNIEXPORT jintArray JNICALL Java_de_meilhaus_medriver_MeDriver_meIOStreamRead
  (JNIEnv *, jobject, jint, jint, jint, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOStreamWrite
 * Signature: (III[II)[I
 */
JNIEXPORT jintArray JNICALL Java_de_meilhaus_medriver_MeDriver_meIOStreamWrite
  (JNIEnv *, jobject, jint, jint, jint, jintArray, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOStreamStart
 * Signature: ([Lde/meilhaus/medriver/MeIOStreamStart;I)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOStreamStart
  (JNIEnv *, jobject, jobjectArray, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOStreamStop
 * Signature: ([Lde/meilhaus/medriver/MeIOStreamStop;I)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOStreamStop
  (JNIEnv *, jobject, jobjectArray, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOStreamStatus
 * Signature: (IIILde/meilhaus/medriver/MeStatus;I)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOStreamStatus
  (JNIEnv *, jobject, jint, jint, jint, jobject, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOStreamFrequencyToTicks
 * Signature: (IIILde/meilhaus/medriver/MeTicks;I)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOStreamFrequencyToTicks
  (JNIEnv *, jobject, jint, jint, jint, jobject, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meIOStreamTimeToTicks
 * Signature: (IIILde/meilhaus/medriver/MeTicks;I)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meIOStreamTimeToTicks
  (JNIEnv *, jobject, jint, jint, jint, jobject, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryDescriptionDevice
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryDescriptionDevice
  (JNIEnv *, jobject, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryInfoDevice
 * Signature: (ILde/meilhaus/medriver/MeInfo;)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryInfoDevice
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryNameDevice
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryNameDevice
  (JNIEnv *, jobject, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryNameDeviceDriver
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryNameDeviceDriver
  (JNIEnv *, jobject, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryNumberDevices
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryNumberDevices
  (JNIEnv *, jobject);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryNumberSubdevices
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryNumberSubdevices
  (JNIEnv *, jobject, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryNumberChannels
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryNumberChannels
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryNumberRanges
 * Signature: (III)I
 */
JNIEXPORT jint JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryNumberRanges
  (JNIEnv *, jobject, jint, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryRangeByMinMax
 * Signature: (IILde/meilhaus/medriver/MeRange;)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryRangeByMinMax
  (JNIEnv *, jobject, jint, jint, jobject);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryRangeInfo
 * Signature: (IILde/meilhaus/medriver/MeRange;)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryRangeInfo
  (JNIEnv *, jobject, jint, jint, jobject);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQuerySubdeviceByType
 * Signature: (IIII)I
 */
JNIEXPORT jint JNICALL Java_de_meilhaus_medriver_MeDriver_meQuerySubdeviceByType
  (JNIEnv *, jobject, jint, jint, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQuerySubdeviceType
 * Signature: (IILde/meilhaus/medriver/MeType;)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meQuerySubdeviceType
  (JNIEnv *, jobject, jint, jint, jobject);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryVersionLibrary
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryVersionLibrary
  (JNIEnv *, jobject);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryVersionMainDriver
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryVersionMainDriver
  (JNIEnv *, jobject);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meQueryVersionDeviceDriver
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_de_meilhaus_medriver_MeDriver_meQueryVersionDeviceDriver
  (JNIEnv *, jobject, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meUtilityExtractValues
 * Signature: (I[I[Lde/meilhaus/medriver/MeIOStreamConfig;)[I
 */
JNIEXPORT jintArray JNICALL Java_de_meilhaus_medriver_MeDriver_meUtilityExtractValues
  (JNIEnv *, jobject, jint, jintArray, jobjectArray);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meUtilityDigitalToPhysical
 * Signature: (DDIIID)D
 */
JNIEXPORT jdouble JNICALL Java_de_meilhaus_medriver_MeDriver_meUtilityDigitalToPhysical
  (JNIEnv *, jobject, jdouble, jdouble, jint, jint, jint, jdouble);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meUtilityPhysicalToDigital
 * Signature: (DDID)I
 */
JNIEXPORT jint JNICALL Java_de_meilhaus_medriver_MeDriver_meUtilityPhysicalToDigital
  (JNIEnv *, jobject, jdouble, jdouble, jint, jdouble);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meUtilitPWMStart
 * Signature: (IIIII)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meUtilitPWMStart
  (JNIEnv *, jobject, jint, jint, jint, jint, jint);

/*
 * Class:     de_meilhaus_medriver_MeDriver
 * Method:    meUtilityPWMStop
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_de_meilhaus_medriver_MeDriver_meUtilityPWMStop
  (JNIEnv *, jobject, jint, jint);

#ifdef __cplusplus
}
#endif
#endif
